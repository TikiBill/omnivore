#!/usr/bin/env python
""" Python 2 version of udis

"""
import os
import glob

import numpy as np

# flags
pcr = 1
und = 2
r = 4
w = 8

def read_udis(pathname):
    """ Read all the processor-specific opcode info and pull into a container
    dictionary keyed on the processor name.
    
    The udis files have module level data, so this pulls the data from multiple
    cpus into a single structure that can then be refereced by processor name.
    For example, to find the opcode table in the generated dictionary for the
    6502 processor, use:
    
    cpus['6502']['opcodeTable']
    """
    files = glob.glob("%s/*.py" % pathname)
    cpus = {}
    for filename in files:
        with open(filename, "r") as fh:
            source = fh.read()
            if "addressModeTable" in source and "opcodeTable" in source:
                localfile = os.path.basename(filename)
                cpu_name, _ = os.path.splitext(localfile)
                g = {"pcr": pcr, "und": und, "r": r, "w": w}
                d = {}
                try:
                    exec(source, g, d)
                    if 'opcodeTable' in d:
                        cpus[cpu_name] = d
                except SyntaxError:
                    # ignore any python 3 files
                    pass
    return cpus


if __name__ == "__main__":
    import sys
    import argparse
    
    supported_cpus = read_udis(".")
    import pprint
    print "# Autogenerated from udis source! Do not edit here, change udis source instead."
    print "processors =",
    for line in pprint.pformat(supported_cpus).splitlines():
        print line.lstrip()
#    print supported_cpus
